from gunfolds.tools import bfutils
from gunfolds.tools import unknownrate as ur
import unittest


class TestBFUtilsFunctions(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        # Read in pickle file with results
        G = {'1': {'1': set([(0, 1)]),
                   '2': set([(0, 1)]), 
                   '3': set([(0, 1)])},
             '3': {'1': set([(0, 1)]),
                   '3': set([(0, 1)]),
                   '2': set([(0, 1)]),
                   '4': set([(0, 1)])},
             '2': {'3': set([(0, 1)]),
                   '2': set([(0, 1)]),
                   '4': set([(0, 1)])},
             '5': {'1': set([(0, 1)])},
             '4': {'1': set([(0, 1)]),
                   '3': set([(0, 1)]),
                   '2': set([(0, 1)]),
                   '5': set([(0, 1)])}}

    def test_call_undersamples(self):
        gs = [{'1': {'1': {(0, 1)}, '2': {(0, 1)}, '3': {(0, 1)}},
              '2': {'2': {(0, 1)}, '3': {(0, 1)}, '4': {(0, 1)}},
              '3': {'1': {(0, 1)}, '2': {(0, 1)}, '3': {(0, 1)}, '4': {(0, 1)}},
              '4': {'1': {(0, 1)}, '2': {(0, 1)}, '3': {(0, 1)}, '5': {(0, 1)}},
              '5': {'1': {(0, 1)}}},
             {'1': {'1': {(0, 1)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1), (2, 0)},
               '5': {(2, 0)}},
              '2': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1), (2, 0)},
               '5': {(0, 1), (2, 0)}},
              '3': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1)},
               '4': {(0, 1), (2, 0)},
               '5': {(0, 1), (2, 0)}},
              '4': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1)}},
              '5': {'1': {(0, 1), (2, 0)}, '2': {(0, 1), (2, 0)}, '3': {(0, 1), (2, 0)}}},
                    {'1': {'1': {(0, 1)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1), (2, 0)},
               '5': {(0, 1), (2, 0)}},
              '2': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1), (2, 0)},
               '5': {(0, 1), (2, 0)}},
              '3': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1)},
               '4': {(0, 1), (2, 0)},
               '5': {(0, 1), (2, 0)}},
              '4': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1)},
               '5': {(0, 1), (2, 0)}},
              '5': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1), (2, 0)}}},
             {'1': {'1': {(0, 1)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1), (2, 0)},
               '5': {(0, 1), (2, 0)}},
              '2': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1), (2, 0)},
               '5': {(0, 1), (2, 0)}},
              '3': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1)},
               '4': {(0, 1), (2, 0)},
               '5': {(0, 1), (2, 0)}},
              '4': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1)},
               '5': {(0, 1), (2, 0)}},
              '5': {'1': {(0, 1), (2, 0)},
               '2': {(0, 1), (2, 0)},
               '3': {(0, 1), (2, 0)},
               '4': {(0, 1), (2, 0)},
               '5': {(0, 1)}}}]

        gs_test = bfutils.call_undersamples(self.G)
        self.assertEqual(gs, gs_test)


    def test_call_undersample(self):
        u = 2
        g_u_2 = {'1': {'1': {(0, 1)},
              '2': {(0, 1), (2, 0)},
              '3': {(0, 1), (2, 0)},
              '4': {(0, 1), (2, 0)},
              '5': {(0, 1), (2, 0)}},
             '2': {'1': {(0, 1), (2, 0)},
              '2': {(0, 1)},
              '3': {(0, 1), (2, 0)},
              '4': {(0, 1), (2, 0)},
              '5': {(0, 1), (2, 0)}},
             '3': {'1': {(0, 1), (2, 0)},
              '2': {(0, 1), (2, 0)},
              '3': {(0, 1)},
              '4': {(0, 1), (2, 0)},
              '5': {(0, 1), (2, 0)}},
             '4': {'1': {(0, 1), (2, 0)},
              '2': {(0, 1), (2, 0)},
              '3': {(0, 1), (2, 0)},
              '4': {(0, 1)},
              '5': {(0, 1), (2, 0)}},
             '5': {'1': {(0, 1), (2, 0)},
              '2': {(0, 1), (2, 0)},
              '3': {(0, 1), (2, 0)},
              '4': {(0, 1), (2, 0)}}}
        g2 = bfutils.undersample(self.G,u)
        self.assertEqual(g_u_2, g2)

        u = 4
        g_u_4 = {'1': {'1': {(0, 1)},
              '2': {(0, 1), (2, 0)},
              '3': {(0, 1), (2, 0)},
              '4': {(0, 1), (2, 0)},
              '5': {(0, 1), (2, 0)}},
             '2': {'1': {(0, 1), (2, 0)},
              '2': {(0, 1)},
              '3': {(0, 1), (2, 0)},
              '4': {(0, 1), (2, 0)},
              '5': {(0, 1), (2, 0)}},
             '3': {'1': {(0, 1), (2, 0)},
              '2': {(0, 1), (2, 0)},
              '3': {(0, 1)},
              '4': {(0, 1), (2, 0)},
              '5': {(0, 1), (2, 0)}},
             '4': {'1': {(0, 1), (2, 0)},
              '2': {(0, 1), (2, 0)},
              '3': {(0, 1), (2, 0)},
              '4': {(0, 1)},
              '5': {(0, 1), (2, 0)}},
             '5': {'1': {(0, 1), (2, 0)},
              '2': {(0, 1), (2, 0)},
              '3': {(0, 1), (2, 0)},
              '4': {(0, 1), (2, 0)},
              '5': {(0, 1)}}}
        g2 = bfutils.undersample(self.G,u)
        self.assertEqual(g_u_4, g2)


if __name__ == '__main__':
    try:
        from teamcity import is_running_under_teamcity
        from teamcity.unittestpy import TeamcityTestRunner

        if is_running_under_teamcity():
            runner = TeamcityTestRunner()
        else:
            runner = unittest.TextTestRunner()
    except ImportError:
        runner = unittest.TextTestRunner()

    unittest.main(testRunner=runner, verbosity=2)
